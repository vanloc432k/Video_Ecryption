import random
import pickle

'''
Euclid's algorithm for determining the greatest common divisor
Use iteration to make it faster for larger integers
'''


def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


'''
Euclid's extended algorithm for finding the multiplicative inverse of two numbers
'''


def multiplicative_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while e > 0:
        temp1 = temp_phi//e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if temp_phi == 1:
        return d + phi


'''
Tests to see if a number is prime.
'''


def is_prime(num):
    if num == 2:
        return True
    if num < 2 or num % 2 == 0:
        return False
    for n in range(3, int(num**0.5)+2, 2):
        if num % n == 0:
            return False
    return True


def generate_key_pair(p, q):

    # n = pq
    n = p * q

    # Phi is the totient of n
    phi = (p-1) * (q-1)

    # Choose an integer e such that e and phi(n) are coprime
    e = random.randrange(1, phi)

    # Use Euclid's Algorithm to verify that e and phi(n) are coprime
    g = gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = gcd(e, phi)

    # Use Extended Euclid's Algorithm to generate the private key
    d = multiplicative_inverse(e, phi)

    # Return public and private key_pair
    # Public key is (e, n) and private key is (d, n)
    return ((e, n), (d, n))


def encrypt(pk, plaintext):
    # Unpack the key into it's components
    key, n = pk
    # Convert each letter in the plaintext to numbers based on the character using a^b mod m
    cipher = [pow(ord(char), key, n) for char in plaintext]
    # Return the array of bytes
    return cipher


def decrypt(pk, ciphertext):
    # Unpack the key into its components
    key, n = pk
    # Generate the plaintext based on the ciphertext and key using a^b mod m
    aux = [str(pow(char, key, n)) for char in ciphertext]
    # Return the array of bytes as a string
    plain = [chr(int(char2)) for char2 in aux]
    return ''.join(plain)


if __name__ == '__main__':
    '''
    Detect if the script is being run directly by the user
    '''
    print("===========================================================================================================")
    print("================================== RSA Encryptor / Decrypter ==============================================")
    print(" ")

    #p = 27836429368641981153844272735361590522968879116323677536452451034030176174465907995148201909773289337252011734922724179929732254037686999920619675930549259895721547780492187179928196586119495074719155169019836832247962311837196936508703540493805293429088130687811486664172647859543582484189051081657381410512218726383274625921762276471644776360501026019606999870906446716479571974082260845871841868385877295646026430378417799973612080200341188857786599997722172531174223681267409784511468591749224427528405425200806871659309960131591264072013087873189284434796307163045548234723547006139113179100662018571223166330721
    #q = 7870763433388118057774589787051520482623538313093206942362387664160113921747748917326673383012082784592097391100066864636821483844882173291709981891105460788910939865867066163916662561650072609281697828893517761465490829422670341792725501517357371807049799003283792058502923794121368317386878552192465386563347291407940188470740465921339530206203348873714574413062088527913372074035557735992297180466556850830991825315855045623539009920890581620012287955962854628486103863155064851587421897396385731404997181771962107911874466490233025850761887725768751855394751454308644409018736640193887268234949328113084521292483
    '''
    print(" - Generating your public / private key-pairs now . . .")

    public, private = generate_key_pair(p, q)
    print(public)
    print(private)
    
    print(" - Your public key is ", public, " and your private key is ", private)'''
    public = (12199278499564376403653338592210183144703088572156824430164245293136216729076493706413403301552363072923675085695807080299704620224038662013598514562222962507844683708184916981010885861322386204643159861169156701058905162244240461270071601711850578021341940543270997969167649254212643269926888407165069640820443278076080675389082577598447426552502401410120810793550957474296663355530622094976249983474655015688921505920803793447669894165826618533010531301724918509551367974765872364808856293633885161068009407969318782214479952919634103954593293163271570109972766030126454898288185339240076781630056330159995629524312324968707260847673516164203844564109745504807759565922916795735185649230927880869870671442738875174706110895824693443165570619132481056534097364673614271329211275392601688620671700151223828857500687779616522290500353768985574620808168646422475701538528933043991815564859967644993100009170426073756285285426204395332436938309992936472550992785791561282995651561617836298915285983124593250650119273608708878779947625343460552368287701885270574358253663511629740695115103933615997997586341751489306050587951072333036519212998483984830385496789644490583817784694101285496168114859542119066462648978744182996738604285897, 219093950390798403036289525572954632872332136266757889132905408780532995631746612865658827066852468830488940743922390866239349246021186409088540928423286729741405197027547449692787855441262711283786639677845577836622112813333446230495842561727201228588876301437398397603116637595166183893927532952019456542463772490695313549498771477256327409638511000933997396192743894873446230159298054322073517185119898505530951097273031699437483326190977738116122319641451344256387883740997947434657107500945744363477387063532620009972794121944270632076352493275194764821466750693682955966581292212724142620742841455603356946725809742953827771221200005221962369269233013118971280927971323071135428599735312829396104292549848290193432448740290288677391023485362327869331277527248066924936126325453639718331582337356815916542467501123460535794740390196081615522355778584821394978809459620116881153812397323468353081956148242920067189151985775111970638164046085743050333498716824042032359969168016321239911277681418918002135109467636009383003153169389373201933692753426269516811966358290703345504357895271300236310324339596234709407219913040398978657643179550994772529364226641373856365896334583807941080744621294017297343581930031867977227549270243)
    print(pickle.dumps(public, 0))
    public = pickle.loads(pickle.dumps(public, 0))
    message = str(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00d\xf3\xe8\xd8') # input(" - Enter a message to encrypt with your public key: ")
    encrypted_msg = encrypt(public, message)

    private = (302121813461474712046369310292560153919126167786976624158472486329566331232724257278824680667138394928960485682494264929339967633092240174342018754140785269142736578265388015658508710597670528886451587273561602492176936318769547341019177979425636968449600894389248202666068055289172246035177348394572497824460924300670209800669987601770133311855807825914417640609920322651518806667304713082550573569192474630520136510367815645508397516556245736428844052847042214360890025661187280725860059635439585886404011276968734556518505365854930092122274198871992585167243288799313257205383922966292114284972069336073033848158326492413914656243790454337506146337611098482375130957405823136380246454598763587514240341587551535903184517795720126955168464808767319601745021292958025560097466838572023018400549134932382972566344987047333424715563238942491508314648953691757907168218309599018580281766904138855278381759813840981930691532572162186003324088381144297512746756529737448877274376182557023526630742536442574151627892206098238940141221300599254638218595992172189959962969581006463857798982498342641969296274652416228067556273203049096137288333199903968591601248041312409568295028387805445642794694088555194295889221476407184211337597715833, 219093950390798403036289525572954632872332136266757889132905408780532995631746612865658827066852468830488940743922390866239349246021186409088540928423286729741405197027547449692787855441262711283786639677845577836622112813333446230495842561727201228588876301437398397603116637595166183893927532952019456542463772490695313549498771477256327409638511000933997396192743894873446230159298054322073517185119898505530951097273031699437483326190977738116122319641451344256387883740997947434657107500945744363477387063532620009972794121944270632076352493275194764821466750693682955966581292212724142620742841455603356946725809742953827771221200005221962369269233013118971280927971323071135428599735312829396104292549848290193432448740290288677391023485362327869331277527248066924936126325453639718331582337356815916542467501123460535794740390196081615522355778584821394978809459620116881153812397323468353081956148242920067189151985775111970638164046085743050333498716824042032359969168016321239911277681418918002135109467636009383003153169389373201933692753426269516811966358290703345504357895271300236310324339596234709407219913040398978657643179550994772529364226641373856365896334583807941080744621294017297343581930031867977227549270243)
    print(encrypted_msg)
    #print(" - Your encrypted message is: ", ''.join(map(lambda x: str(x), encrypted_msg)))
    print(" - Decrypting message with private key ", private, " . . .")
    print(" - Your message is: ", decrypt(private, encrypted_msg))

    print(" ")
    print("============================================ END ==========================================================")
    print("===========================================================================================================")